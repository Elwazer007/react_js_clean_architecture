{"ast":null,"code":"import _defineProperty from \"C:/Users/63997/Documents/Projects/Wela/nextjs-blog/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"C:/Users/63997/Documents/Projects/Wela/nextjs-blog/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/63997/Documents/Projects/Wela/nextjs-blog/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { ItemServiceImpl } from \"domain/usecases/ItemService\";\nimport { ItemRepositoryImpl } from \"data/repositories/ItemRepositoryImpl\";\n// Define the initial state using that type\nvar initialState = {\n  loading: false,\n  items: []\n};\nexport var fetchList = createAsyncThunk(\"itemList/fetchList\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var itemRepo, itemService, items;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          itemRepo = new ItemRepositoryImpl();\n          itemService = new ItemServiceImpl(itemRepo);\n          _context.next = 4;\n          return itemService.GetItems();\n\n        case 4:\n          items = _context.sent;\n          console.log(items);\n          return _context.abrupt(\"return\", items);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n})));\nexport var itemSlice = createSlice({\n  name: \"itemList\",\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState: initialState,\n  reducers: {},\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(fetchList.fulfilled, function (state, action) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        items: action.payload,\n        loading: false\n      });\n    });\n    builder.addCase(fetchList.pending, function (state) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true\n      });\n    });\n    builder.addCase(fetchList.rejected, function (state) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false\n      });\n    });\n  }\n}); // Other code such as selectors can use the imported `RootState` type\n\nexport var items = function items(state) {\n  return state.items.items;\n};\nexport default itemSlice.reducer;","map":{"version":3,"sources":["C:/Users/63997/Documents/Projects/Wela/nextjs-blog/src/app/redux/item/item.slice.ts"],"names":["createSlice","createAsyncThunk","ItemServiceImpl","ItemRepositoryImpl","initialState","loading","items","fetchList","itemRepo","itemService","GetItems","console","log","itemSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","pending","rejected","reducer"],"mappings":";;;;;;;;AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AAGA,SAASC,eAAT,QAAgC,6BAAhC;AACA,SAASC,kBAAT,QAAmC,sCAAnC;AAQA;AACA,IAAMC,YAA0B,GAAG;AAC/BC,EAAAA,OAAO,EAAE,KADsB;AAE/BC,EAAAA,KAAK,EAAE;AAFwB,CAAnC;AAKA,OAAO,IAAMC,SAAS,GAAGN,gBAAgB,CAAC,oBAAD,wEAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AACtDO,UAAAA,QADsD,GAC3C,IAAIL,kBAAJ,EAD2C;AAEtDM,UAAAA,WAFsD,GAExC,IAAIP,eAAJ,CAAoBM,QAApB,CAFwC;AAAA;AAAA,iBAGxCC,WAAW,CAACC,QAAZ,EAHwC;;AAAA;AAGtDJ,UAAAA,KAHsD;AAI5DK,UAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AAJ4D,2CAKrDA,KALqD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB,GAAlC;AAOP,OAAO,IAAMO,SAAS,GAAGb,WAAW,CAAC;AACjCc,EAAAA,IAAI,EAAE,UAD2B;AAEjC;AACAV,EAAAA,YAAY,EAAZA,YAHiC;AAIjCW,EAAAA,QAAQ,EAAE,EAJuB;AAKjCC,EAAAA,aAAa,EAAE,uBAACC,OAAD,EAAa;AACxBA,IAAAA,OAAO,CAACC,OAAR,CAAgBX,SAAS,CAACY,SAA1B,EAAqC,UAACC,KAAD,EAAQC,MAAR,EAAmB;AACpD,6CACOD,KADP;AAEId,QAAAA,KAAK,EAAEe,MAAM,CAACC,OAFlB;AAGIjB,QAAAA,OAAO,EAAE;AAHb;AAKH,KAND;AAOAY,IAAAA,OAAO,CAACC,OAAR,CAAgBX,SAAS,CAACgB,OAA1B,EAAmC,UAACH,KAAD,EAAW;AAC1C,6CACOA,KADP;AAEIf,QAAAA,OAAO,EAAE;AAFb;AAIH,KALD;AAMAY,IAAAA,OAAO,CAACC,OAAR,CAAgBX,SAAS,CAACiB,QAA1B,EAAoC,UAACJ,KAAD,EAAW;AAC3C,6CACOA,KADP;AAEIf,QAAAA,OAAO,EAAE;AAFb;AAIH,KALD;AAMH;AAzBgC,CAAD,CAA7B,C,CA4BP;;AACA,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACc,KAAD;AAAA,SAAsBA,KAAK,CAACd,KAAN,CAAYA,KAAlC;AAAA,CAAd;AAEP,eAAeO,SAAS,CAACY,OAAzB","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"\r\nimport type { RootState } from \"../store\"\r\n\r\nimport { ItemServiceImpl } from \"domain/usecases/ItemService\"\r\nimport { ItemRepositoryImpl } from \"data/repositories/ItemRepositoryImpl\"\r\nimport { Item } from \"domain/entities/Item\"\r\n// Define a type for the slice state\r\ninterface CounterState {\r\n    loading: boolean\r\n    items: Array<Item>\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: CounterState = {\r\n    loading: false,\r\n    items: [],\r\n}\r\n\r\nexport const fetchList = createAsyncThunk(\"itemList/fetchList\", async () => {\r\n    const itemRepo = new ItemRepositoryImpl()\r\n    const itemService = new ItemServiceImpl(itemRepo)\r\n    const items = await itemService.GetItems()\r\n    console.log(items)\r\n    return items\r\n})\r\nexport const itemSlice = createSlice({\r\n    name: \"itemList\",\r\n    // `createSlice` will infer the state type from the `initialState` argument\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(fetchList.fulfilled, (state, action) => {\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n                loading: false,\r\n            }\r\n        })\r\n        builder.addCase(fetchList.pending, (state) => {\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n            }\r\n        })\r\n        builder.addCase(fetchList.rejected, (state) => {\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n            }\r\n        })\r\n    },\r\n})\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const items = (state: RootState) => state.items.items\r\n\r\nexport default itemSlice.reducer"]},"metadata":{},"sourceType":"module"}